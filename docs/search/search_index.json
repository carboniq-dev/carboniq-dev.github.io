{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the documentation for Snap Central, an Unreal Engine 5 plugin designed for runtime usage that provides a versatile and efficient solution for managing a precise 3D snapping system that spans across the entire world, ensuring high performance.</p> <p>The plugin's Central Grid actor simplifies snapping management by exposing its functionality through a single function, allowing developers to obtain snap locations, UIDs, and other relevant information. This enables easy implementation of custom snapping logic at runtime, making it suitable for games that require dynamic or procedural level design.</p> <p>The visuals provide a clear and intuitive visual representation of the snapping system, simplifying the process for developers.</p> <p>In summary, SnapCentral is a useful tool for developers looking to implement a grid snapping system at runtime in their Unreal Engine 5 games. With its straightforward function and optimized performance, the plugin simplifies snapping management with no computational overhead.</p> <p>You can purchase the plugin on the Unreal Engine Marketplace</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v11-juli-6-2023","title":"v1.1 Juli 6, 2023","text":"<p>Features:</p> <ul> <li>Central Grid actor can be used to toggle visibility of the Grid, Area, Selected Tile, and Preview Mesh at Runtime.</li> </ul>"},{"location":"changelog/#v10-may-8-2023-release","title":"v1.0 May 8, 2023 (Release)","text":""},{"location":"epilogue/","title":"Epilogue","text":"<p>Kindly take note that although the plugin holds the capacity to serve a multitude of purposes, it is not intended to serve as a conclusive game solution. Rather, it is crafted to equip developers with a robust toolset to craft the final solution.</p> <p>While the objective was to streamline the snapping process while offering maximum flexibility, some behaviors may not appear self-explanatory. If you believe that the documentation does not adequately cover the use cases and settings, please do not hesitate to contact me via the Epic Store.</p> <p>Thank you for taking an interest in Snap Central. I hope you find it both useful and enjoyable!</p>"},{"location":"example/","title":"Example","text":"<p>The following steps demonstrate one possible setup for using the snap functionality in a game.</p>"},{"location":"example/#add-the-grid-actor","title":"Add the Grid Actor","text":"<ol> <li>Create a project by selecting the third person template.</li> <li>Open the project.</li> <li>Go to the Place Actor tab and search for the Central Grid actor.</li> <li>Drag the actor into your world and set the grid visuals to true.</li> </ol>"},{"location":"example/#add-the-function","title":"Add the function","text":"<ol> <li>Open the character blueprint or any other blueprint you wish to place the logic into.</li> <li>Create a reference to the Central Grid actor.</li> <li>Drag out from the actor reference and search for the Get Snap Parameter function.</li> <li>Create a reference to the Camera Component and connect it to the Target Object pin.</li> <li>Set the Snap Type to Highest Corner.</li> <li>Tick all Snap to checkboxes.</li> <li>Split the Lock pin and create the three boolean variables named Lock X-Axis, Lock Y-Axis and Lock Z-Axis and connect them to the corresponding Lock pin. Alternatively you can right click the pins and promote them to a variable.</li> <li>Split the OUT pin and promote the Snap Location to a variable.</li> </ol>"},{"location":"example/#hook-up-events","title":"Hook up events","text":"<ol> <li>In this example we use the Left Ctrl, Left Shift and Left Alt key to toggle the boolean variables.</li> <li>To use the snap location, simply facilitate the built-in Unreal Engine Spawn Actor function to spawn any actor at the snap location. In this example we use the Left Mouse Button to execute.</li> </ol>"},{"location":"faq/","title":"FAQ","text":"<p>Is it possible to use the plugin to snap to actors?</p> <ul> <li>The short answer is no. The snap locations always refer to the grid. However, by selecting HitLocation as the Snap Type, it is possible to snap along the Z-axis on any actor. With additional logic, achieving actor snapping should be feasible.</li> </ul> <p>Why is the snap location jumping when I try to snap underneath an actor like a bridge?</p> <ul> <li>If this happens, it is likely that the line trace hit the above actor first, causing the plugin to take it as the reference for calculating the snap location. To avoid this issue, you can adjust the Line Trace Extent property by decreasing its value, or add specific actors that should not be considered to the Ignore Actors For Line Traces array. In addition, you can enable debugging visuals to make it easier to spot issues.</li> </ul> <p>Why is the snap location elevated when I use the plugin on my custom landscape?</p> <ul> <li>This issue can occur if the scale of the landscape's Z-axis does not match the original scale. To prevent any displacement issues, it's important to ensure that the scaling values in the software used for creating landscape geometry are accurate. In most cases, export information is displayed that shows the scaling values.</li> </ul> <p>Tip</p> <p>When exporting a height map for use in Unreal Engine, it's recommended to check the export options and ensure that the height map is exported as PNG 16-bit.</p> <p>Why are my custom materials not applied correctly?</p> <ul> <li>The visuals for the grid are decal actors and require materials with their domain set to Deferred Decal.</li> </ul> <p>Tip</p> <p>It's important to note that if you want to reproduce the grid lines, you'll need to take the Tile Size into account. By doing so, you can ensure that the grid lines align properly with the rest of the grid.</p>"},{"location":"how-it-works/","title":"How it works","text":"<p>To use the plugin, simply search the CentralGrid actor in the Place Actors tab, add it to your world and obtain a reference to it. The actor provides a function called GetSnapParameters, which can be called to handle line tracing, finding the closest snap location, and handling visualizations. To use the function, pass an actor or camera component to it, and the plugin will take care of the rest.</p> <p>If necessary, you can also pass a vector to the TargetLocation pin and handle the logic yourself. This may be required in cases where complex character movements or actions are involved, such as jumping off cliffs while snap dragging along floating planes.</p> <p>Overall, the CentralGrid actor and its associated function provide a convenient and efficient way to implement snapping and grid-based movement in your Unreal project, while also offering flexibility and control for more complex scenarios.</p>"},{"location":"input-parameters/","title":"Input Parameters","text":"<p>This section provides an overview of the input parameters available on the exposed Get Snap Parameters function.</p> <p></p>"},{"location":"input-parameters/#parameters","title":"Parameters","text":"Property Type Description Target Actor Reference to the Central Grid actor. Target Object Object Specifies the object to use as the target for an automatic line trace and snap location calculation. Can be an actor or a camera component. Target Location Vector Where to locate the nearest snap location. Should not be used if Target Object is set. Snap Type SnapType Determines the method used to calculate the z-coordinate of the snap location. Snap To SnapAxis Specifies the axis to which snapping should occur. Lock LockAxis Defines the positional axis to be locked onto. Preview Mesh Static Mesh Mesh will serve as the preview."},{"location":"input-parameters/#snap-type","title":"Snap Type","text":"Option Description Tile Center Calculates the z-coordinate of the snap location by tracing the center of the target tile. Average Corner Calculates the z-coordinate of the snap location by tracing the corners of the target tile and taking the average. Lowest Corner Calculates the z-coordinate of the snap location by tracing the corners of the target tile and taking only the lowest corner into account. Highest Corner Calculates the z-coordinate of the snap location by tracing the corners of the target tile and taking only the highest corner into account. Hit Location The z-coordinate of the snap location is established as the z-coordinate of the hit location, or alternatively, as the z-coordinate of the end location in the absence of any hit detection. This is particularly useful when pointing at buildings or other obstacles, or locking objects onto a specific distance by setting Object Trace Distance on the Central Grid actor to a low value. Please take note that the inclusion of this particular feature was intended to provide users with greater flexibility. Nonetheless, it should be noted that this increased flexibility may result in the plugin partially relinquishing control over certain settings or configurations, and consequently, may not yield the intended outcome. Additionally, it should be mentioned that the vertical indicator is disabled for this particular type."},{"location":"input-parameters/#snap-to","title":"Snap To","text":"Property Type Description Snap To X-Axis Boolean If set to true, snapping is applied to the x-axis. Snap To Y-Axis Boolean If set to true, snapping is applied to the y-axis. Snap To Z-Axis Boolean If set to true, snapping is applied to the z-axis."},{"location":"input-parameters/#lock","title":"Lock","text":"Property Type Description Lock X-Axis Boolean If set to true, position will be locked onto the x-axis. Lock Y-Axis Boolean If set to true, position will be locked onto the y-axis. Lock Z-Axis Boolean If set to true, position will be locked onto the z-axis."},{"location":"output-parameters/","title":"Ouput Parameters","text":"<p>This section provides an overview of the ouput parameters available on the exposed Get Snap Parameters function.</p> <p>collapsed</p> <p></p> <p>expanded</p> <p></p>"},{"location":"output-parameters/#snap-parameters","title":"Snap Parameters","text":"Property Type Description Snap Location Vector The closest snap location calculated based on the Target Object or Target Vector passed to the corresponding pin. Snap Location UID String The unique identifier string for the current snap location is the hash of the snap location. It is important to note that the UID will change if you modify the Tile Size, as this will cause the snap locations to shift accordingly. Hit Location Vector The hit location used for calculations. Is Landscape Hit Boolean Indicates whether a trace hit result is from a landscape actor or not. Works only if Target Object is set. Is Other Actor Hit Boolean Indicates whether a trace hit result is from any actor or not. Works only if Target Object is set. Actor Hit Actor Actor returned by the trace hit result. Drag Locations Array&lt;DragResult&gt; The drag result data for each snap location is stored in an array, which requires snapping to either the X and Y-axis or the Z-axis and dragging over a minimum of two tiles in order to hold meaningful values. Drag Locations Count Int The number of detected tiles on the dragged area."},{"location":"output-parameters/#drag-result","title":"Drag Result","text":"Property Type Description Location Vector Snap location closest to a specific location where a drag has occurred. UID String Unique identifier string for the snap location."},{"location":"setup/","title":"Setup","text":"<ol> <li>Go to the Epic Store, download and install the Snap Central plugin to a supported Unreal Engine version.</li> <li>Open up the Unreal Editor and create a project. (e.g. you can use the Third Person Template)</li> <li>Go to Edit &gt; Plugins and search for the SnapCentral plugin.</li> <li>Tick the box and restart your Editor.</li> </ol>"},{"location":"setup/#verification","title":"Verification","text":"<ol> <li>After restarting the editor go to the Place Actor tab and search for the CentralGrid actor.</li> <li>Drag the CentralGrid actor into your world.</li> </ol>"},{"location":"the-grid/","title":"Grid Actor","text":"<p>This section provides an overview of the CentralGrid actor's properties that affect the grid logic, visuals and debugging.</p>"},{"location":"the-grid/#main","title":"Main","text":"Property Type Description Show Grid Boolean If set to true, the grid will be visible. Show Area Boolean If set to true, the area around the selected tile will be visible. Show Selected Tile Boolean If set to true, the selected tile will be visualized. Show Preview Mesh Boolean If set to true, a preview mesh will spawn to visualize and demonstrate item placement on the current snap location. Lock Grid Position Boolean If set to true, the grid position will be locked. Snapping will stay unaffected. Grid Size Float Specifies the area size of the grid. Snapping will stay unaffected. Grid Extent Float Specifies the extent of the grid. The greater the landscape elevation, the higher this value should be. Snapping will stay unaffected. Grid Draw Height Start Int Specifies the start height from where the grid will be drawn. Snapping will stay unaffected. Area Scale Factor Float Defines the scaling factor for the area surrounding the selected tile. The size of the area is proportional to the size of the tile and can be increased by a set percentage. Tile Size Int Defines the size of the grid tiles. Adjust Preview Mesh Size Boolean If set to true, the preview mesh will be resized in accordance with the tile size."},{"location":"the-grid/#colors-materials","title":"Colors &amp; Materials","text":"Property Type Description Grid Color Linear Color Defines the color of the grid. Area Color Linear Color Defines the color of the area surrounding the tile. Selection Color Linear Color Defines the color of the selected tile. Preview Mesh Color Linear Color Defines the color of the preview mesh. Grid Glow Float Defines the glow intensity of the grid. Area Glow Float Defines the glow intensity of the area surrounding the tile. Selection Glow Float Defines the glow intensity of the selected tile. Preview Mesh Glow Float Defines the glow intensity of the preview mesh. Preview Mesh Transparency Float Defines the transparency of the preview mesh. Custom Grid Material Material Replaces the material used by the plugin for the grid. Custom Area Material Material Replaces the material used by the plugin for the area surrounding the tile. Custom Selection Material Material Replaces the material used by the plugin for the selected tile."},{"location":"the-grid/#audio","title":"Audio","text":"Property Type Description Enable Boolean If set to true, audio feedback for selected tiles is enabled. The playing of audio is dependent on the settings configured in the Get Snap Parameter function. Volume Multiplier Float Volume multiplier for the audio feedback (Range 0-1). Custom Cue Sound Cue Replaces the audio cue used by the plugin."},{"location":"the-grid/#advanced","title":"Advanced","text":"Property Type Description Object Trace Distance Float Defines the Target Object trace distance. This value will be overwritten if Lock Z-Axis is set to true on the GetSnapParameter function. Line Trace Extent Float Alters the start and end location for the line traces to calculate the z-coordinate to snap to. Tile Corner Line Trace Padding Float Specifies the padding of the corner line traces. It is crucial to note that the value should only be intentionally set to zero or lower, as traces will hit the neighboring tile and potentially cause undesired side effects. The minimum value, which corresponds to the center location of the tile, is equivalent to half the tile size. Drag Height Multiplier Float Multiplies the drag height, allowing you to drag higher but will also make scrolling more rapid. Ignore Actors For Decals Array&lt;Actor&gt; Actors added to the array will not be affected by the grid visuals. This includes the grid, area and selected tile decals. Ignore Actors For Line Traces Array&lt;Actor&gt; Actors added to the array will not be affected by any line traces issued by this plugin."},{"location":"the-grid/#debug","title":"Debug","text":"Property Type Description Enable Boolean Enables debug settings. Show Vertical Indicator Boolean If set to true, a vertical indicator will appear to assist with debugging vertical dragging. Show Line Traces Boolean If set to true, all line traces used by the plugin for calculations will be visible. Show Hit Location Line Boolean If set to true, the original hit location will be indicated by a vertical line. Show Hit Location Sphere Boolean If set to true, the original hit location will be indicated by a sphere. Show Debug Panel Boolean If set to true, a debug panel containing the most important information will be displayed in the top-left corner. Line Trace Color Color Defines the color of the line traces. Hit Location Indicator Color Color Defines the color of the original hit location indicator."},{"location":"usage/","title":"Usage","text":"<p>There are two ways to use the Get Snap Parameter function. Both options basically do the same with one exception.</p>"},{"location":"usage/#with-object","title":"With Object","text":"<p>When passing an actor or camera component to the Target Object the plugin will streamline the snapping process by automating tracing and calculations, and enables vertical drag for added flexibility.</p> <p></p> <p></p>"},{"location":"usage/#with-vector","title":"With Vector","text":"<p>When passing a vector to the Target Location the plugin will streamline the snapping process by automating tracing and calculations. However, vertical drag is disabled due to the missing pitch value which is required to calculate the drag offset on the Z-axis.</p> <p>This feature may be required for certain edge cases that involve complex character movements or actions, such as jumping off cliffs while snap-dragging along floating planes, where more dynamic positioning may be required. In these cases, it may be advisable to use only the plugin's snap logic and your own custom logic for handling the Z-axis drag.</p> <p></p>"},{"location":"use-cases/","title":"Possible Use Cases","text":"<ul> <li>Implementing a system for building or placing objects in a 3D space with precise positioning and snapping to a grid or other points of reference.</li> <li>Creating a puzzle game or level editor that requires precise tile placement or snap-to-grid functionality.</li> <li>Enabling players to create custom maps or levels for a game, with the ability to snap objects or tiles to specific locations.</li> <li>Supporting a crafting or construction system that requires precise placement of components or parts.</li> <li>Creating a game that involves navigation or movement in a 3D space, such as a platformer or a first-person game, with snap-to-grid functionality for character movement.</li> <li>Implementing a system for placing or arranging objects in a 3D space that requires consistency or symmetry, such as in a building game or a city simulator.</li> <li>Enabling players to create custom camera positions or movements that snap to specific locations or angles, such as in a game with multiple viewing modes or perspectives.</li> </ul> <p>Youtube Demo</p>"}]}