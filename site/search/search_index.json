{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Carbon IQ Plugins","text":""},{"location":"#snap-central","title":"Snap Central","text":"<p>Designed for runtime usage that provides a versatile and efficient solution for managing a precise 3D snapping system that spans across the entire world</p> <p>Epic Store | Trailer | Documentation</p> <p></p>"},{"location":"#trail-blazer","title":"Trail Blazer","text":"<p>Provides customizable solutions for specific pathfinding requirements in game development. It features dynamic obstacle handling and grid-based logic.</p> <p>Epic Store | Documentation</p> <p></p> <p>Note</p> <p>This plugin is currently undergoing the review process by Epic Games.</p>"},{"location":"snap-central/","title":"Introduction","text":"<p>Welcome to the documentation for Snap Central, an Unreal Engine 5 plugin designed for runtime usage that provides a versatile and efficient solution for managing a precise 3D snapping system that spans across the entire world, ensuring high performance.</p> <p>The plugin's Central Grid actor simplifies snapping management by exposing its functionality through a single function, allowing developers to obtain snap locations, UIDs, and other relevant information. This enables easy implementation of custom snapping logic at runtime, making it suitable for games that require dynamic or procedural level design.</p> <p>The visuals provide a clear and intuitive visual representation of the snapping system, simplifying the process for developers.</p> <p>In summary, SnapCentral is a useful tool for developers looking to implement a grid snapping system at runtime in their Unreal Engine 5 games. With its straightforward function and optimized performance, the plugin simplifies snapping management with no computational overhead.</p> <p>You can purchase the plugin on the Unreal Engine Marketplace</p>"},{"location":"snap-central/changelog/","title":"Changelog","text":""},{"location":"snap-central/changelog/#v14-august-10-2023","title":"v1.4 August 10, 2023","text":"<ul> <li>Renames FSnapParameters to FSnapCentralParameters to fix conlicts with MSSR when packaging.</li> </ul>"},{"location":"snap-central/changelog/#v13-juli-12-2023","title":"v1.3 Juli 12, 2023","text":"<ul> <li>Added function: Get AOE</li> <li>Removes auto-set material for custom preview meshes</li> </ul>"},{"location":"snap-central/changelog/#v12-juli-10-2023","title":"v1.2 Juli 10, 2023","text":"<ul> <li>Added function: Set Grid Visibilties</li> <li>Added function: Set Tile Size</li> </ul>"},{"location":"snap-central/changelog/#v11-juli-6-2023","title":"v1.1 Juli 6, 2023","text":"<ul> <li>The Central Grid actor updates the visibility of the Grid, Area, Selected Tile, and Preview Mesh at runtime when the flags are toggled.</li> </ul>"},{"location":"snap-central/changelog/#v10-may-8-2023-release","title":"v1.0 May 8, 2023 (Release)","text":""},{"location":"snap-central/epilogue/","title":"Epilogue","text":"<p>Kindly take note that although the plugin holds the capacity to serve a multitude of purposes, it is not intended to serve as a conclusive game solution. Rather, it is crafted to equip developers with a robust toolset to craft the final solution.</p> <p>While the objective was to streamline the snapping process while offering maximum flexibility, some behaviors may not appear self-explanatory. If you believe that the documentation does not adequately cover the use cases and settings, please do not hesitate to contact me via the Epic Store.</p> <p>Thank you for taking an interest in Snap Central. I hope you find it both useful and enjoyable!</p>"},{"location":"snap-central/example/","title":"Example","text":"<p>The following steps demonstrate one possible setup for using the snap functionality in a game.</p>"},{"location":"snap-central/example/#add-the-grid-actor","title":"Add the Grid Actor","text":"<ol> <li>Create a project by selecting the third person template.</li> <li>Open the project.</li> <li>Go to the Place Actor tab and search for the Central Grid actor.</li> <li>Drag the actor into your world and set the grid visuals to true.</li> </ol>"},{"location":"snap-central/example/#add-the-function","title":"Add the function","text":"<ol> <li>Open the character blueprint or any other blueprint you wish to place the logic into.</li> <li>Create a reference to the Central Grid actor.</li> <li>Drag out from the actor reference and search for the Get Snap Parameter function.</li> <li>Create a reference to the Camera Component and connect it to the Target Object pin.</li> <li>Set the Snap Type to Highest Corner.</li> <li>Tick all Snap to checkboxes.</li> <li>Split the Lock pin and create the three boolean variables named Lock X-Axis, Lock Y-Axis and Lock Z-Axis and connect them to the corresponding Lock pin. Alternatively you can right click the pins and promote them to a variable.</li> <li>Split the OUT pin and promote the Snap Location to a variable.</li> </ol>"},{"location":"snap-central/example/#hook-up-events","title":"Hook up events","text":"<ol> <li>In this example we use the Left Ctrl, Left Shift and Left Alt key to toggle the boolean variables.</li> <li>To use the snap location, simply facilitate the built-in Unreal Engine Spawn Actor function to spawn any actor at the snap location. In this example we use the Left Mouse Button to execute.</li> </ol>"},{"location":"snap-central/faq/","title":"FAQ","text":"<p>Is it possible to use the plugin to snap to actors?</p> <ul> <li>The short answer is no. The snap locations always refer to the grid. However, by selecting HitLocation as the Snap Type, it is possible to snap along the Z-axis on any actor. With additional logic, achieving actor snapping should be feasible.</li> </ul> <p>Why is the snap location jumping when I try to snap underneath an actor like a bridge?</p> <ul> <li>If this happens, it is likely that the line trace hit the above actor first, causing the plugin to take it as the reference for calculating the snap location. To avoid this issue, you can adjust the Line Trace Extent property by decreasing its value, or add specific actors that should not be considered to the Ignore Actors For Line Traces array. In addition, you can enable debugging visuals to make it easier to spot issues.</li> </ul> <p>Why is the snap location elevated when I use the plugin on my custom landscape?</p> <ul> <li>This issue can occur if the scale of the landscape's Z-axis does not match the original scale. To prevent any displacement issues, it's important to ensure that the scaling values in the software used for creating landscape geometry are accurate. In most cases, export information is displayed that shows the scaling values.</li> </ul> <p>Tip</p> <p>When exporting a height map for use in Unreal Engine, it's recommended to check the export options and ensure that the height map is exported as PNG 16-bit.</p> <p>Why are my custom materials not applied correctly?</p> <ul> <li>The visuals for the grid are decal actors and require materials with their domain set to Deferred Decal.</li> </ul> <p>Tip</p> <p>It's important to note that if you want to reproduce the grid lines, you'll need to take the Tile Size into account. By doing so, you can ensure that the grid lines align properly with the rest of the grid.</p>"},{"location":"snap-central/how-it-works/","title":"How it works","text":"<p>To use the plugin, simply search the CentralGrid actor in the Place Actors tab, add it to your world and obtain a reference to it. The actor provides a function called GetSnapParameters, which can be called to handle line tracing, finding the closest snap location, and handling visualizations. To use the function, pass an actor or camera component to it, and the plugin will take care of the rest.</p> <p>If necessary, you can also pass a vector to the TargetLocation pin and handle the logic yourself. This may be required in cases where complex character movements or actions are involved, such as jumping off cliffs while snap dragging along floating planes.</p> <p>Overall, the CentralGrid actor and its associated function provide a convenient and efficient way to implement snapping and grid-based movement in your Unreal project, while also offering flexibility and control for more complex scenarios.</p>"},{"location":"snap-central/input-parameters/","title":"Input Parameters","text":"<p>This section provides an overview of the input parameters available on the exposed Get Snap Parameters function.</p> <p></p>"},{"location":"snap-central/input-parameters/#parameters","title":"Parameters","text":"Property Type Description Target Actor Reference to the Central Grid actor. Target Object Object Specifies the object to use as the target for an automatic line trace and snap location calculation. Can be an actor or a camera component. Target Location Vector Where to locate the nearest snap location. Should not be used if Target Object is set. Snap Type SnapType Determines the method used to calculate the z-coordinate of the snap location. Snap To SnapAxis Specifies the axis to which snapping should occur. Lock LockAxis Defines the positional axis to be locked onto. Preview Mesh Static Mesh Mesh will serve as the preview."},{"location":"snap-central/input-parameters/#snap-type","title":"Snap Type","text":"Option Description Tile Center Calculates the z-coordinate of the snap location by tracing the center of the target tile. Average Corner Calculates the z-coordinate of the snap location by tracing the corners of the target tile and taking the average. Lowest Corner Calculates the z-coordinate of the snap location by tracing the corners of the target tile and taking only the lowest corner into account. Highest Corner Calculates the z-coordinate of the snap location by tracing the corners of the target tile and taking only the highest corner into account. Hit Location The z-coordinate of the snap location is established as the z-coordinate of the hit location, or alternatively, as the z-coordinate of the end location in the absence of any hit detection. This is particularly useful when pointing at buildings or other obstacles, or locking objects onto a specific distance by setting Object Trace Distance on the Central Grid actor to a low value. Please take note that the inclusion of this particular feature was intended to provide users with greater flexibility. Nonetheless, it should be noted that this increased flexibility may result in the plugin partially relinquishing control over certain settings or configurations, and consequently, may not yield the intended outcome. Additionally, it should be mentioned that the vertical indicator is disabled for this particular type."},{"location":"snap-central/input-parameters/#snap-to","title":"Snap To","text":"Property Type Description Snap To X-Axis Boolean If set to true, snapping is applied to the x-axis. Snap To Y-Axis Boolean If set to true, snapping is applied to the y-axis. Snap To Z-Axis Boolean If set to true, snapping is applied to the z-axis."},{"location":"snap-central/input-parameters/#lock","title":"Lock","text":"Property Type Description Lock X-Axis Boolean If set to true, position will be locked onto the x-axis. Lock Y-Axis Boolean If set to true, position will be locked onto the y-axis. Lock Z-Axis Boolean If set to true, position will be locked onto the z-axis."},{"location":"snap-central/output-parameters/","title":"Ouput Parameters","text":"<p>This section provides an overview of the ouput parameters available on the exposed Get Snap Parameters function.</p> <p>collapsed</p> <p></p> <p>expanded</p> <p></p>"},{"location":"snap-central/output-parameters/#snap-parameters","title":"Snap Parameters","text":"Property Type Description Snap Location Vector The closest snap location calculated based on the Target Object or Target Vector passed to the corresponding pin. Snap Location UID String The unique identifier string for the current snap location is the hash of the snap location. It is important to note that the UID will change if you modify the Tile Size, as this will cause the snap locations to shift accordingly. Hit Location Vector The hit location used for calculations. Is Landscape Hit Boolean Indicates whether a trace hit result is from a landscape actor or not. Works only if Target Object is set. Is Other Actor Hit Boolean Indicates whether a trace hit result is from any actor or not. Works only if Target Object is set. Actor Hit Actor Actor returned by the trace hit result. Drag Locations Array&lt;DragResult&gt; The drag result data for each snap location is stored in an array, which requires snapping to either the X and Y-axis or the Z-axis and dragging over a minimum of two tiles in order to hold meaningful values. Drag Locations Count Int The number of detected tiles on the dragged area."},{"location":"snap-central/output-parameters/#drag-result","title":"Drag Result","text":"Property Type Description Location Vector Snap location closest to a specific location where a drag has occurred. UID String Unique identifier string for the snap location."},{"location":"snap-central/runtime-controls/","title":"Runtime Controls","text":"<p>To enhance flexibility during runtime, you can utilize the following functions.</p>"},{"location":"snap-central/runtime-controls/#set-grid-visibilities","title":"Set Grid Visibilities","text":"<p>Sets the visibility of the Grid, Area, Selected Tile, and Preview Mesh.</p> <p></p>"},{"location":"snap-central/runtime-controls/#set-tile-size","title":"Set Tile Size","text":"<p>Sets the tile size.</p> <p></p>"},{"location":"snap-central/runtime-controls/#get-aoe","title":"Get AOE","text":"<p>Calculates the locations of tiles around a given snap location based on a specified extension factor.</p> <p></p>"},{"location":"snap-central/setup/","title":"Setup","text":"<ol> <li>Go to the Epic Store, download and install the Snap Central plugin to a supported Unreal Engine version.</li> <li>Open up the Unreal Editor and create a project. (e.g. you can use the Third Person Template)</li> <li>Go to Edit &gt; Plugins and search for the SnapCentral plugin.</li> <li>Tick the box and restart your Editor.</li> </ol>"},{"location":"snap-central/setup/#verification","title":"Verification","text":"<ol> <li>After restarting the editor go to the Place Actor tab and search for the CentralGrid actor.</li> <li>Drag the CentralGrid actor into your world.</li> </ol>"},{"location":"snap-central/the-grid/","title":"Grid Actor","text":"<p>This section provides an overview of the CentralGrid actor's properties that affect the grid logic, visuals and debugging.</p>"},{"location":"snap-central/the-grid/#main","title":"Main","text":"Property Type Description Show Grid Boolean If set to true, the grid will be visible. Can be set at runtime. Show Area Boolean If set to true, the area around the selected tile will be visible. Can be set at runtime. Show Selected Tile Boolean If set to true, the selected tile will be visualized. Can be set at runtime. Show Preview Mesh Boolean If set to true, a preview mesh will spawn to visualize and demonstrate item placement on the current snap location. Can be set at runtime. Lock Grid Position Boolean If set to true, the grid position will be locked. Snapping will stay unaffected. Grid Size Float Specifies the area size of the grid. Snapping will stay unaffected. Grid Extent Float Specifies the extent of the grid. The greater the landscape elevation, the higher this value should be. Snapping will stay unaffected. Grid Draw Height Start Int Specifies the start height from where the grid will be drawn. Snapping will stay unaffected. Area Scale Factor Float Defines the scaling factor for the area surrounding the selected tile. The size of the area is proportional to the size of the tile and can be increased by a set percentage. Tile Size Int Defines the size of the grid tiles. Adjust Preview Mesh Size Boolean If set to true, the preview mesh will be resized in accordance with the tile size."},{"location":"snap-central/the-grid/#colors-materials","title":"Colors &amp; Materials","text":"Property Type Description Grid Color Linear Color Defines the color of the grid. Area Color Linear Color Defines the color of the area surrounding the tile. Selection Color Linear Color Defines the color of the selected tile. Preview Mesh Color Linear Color Defines the color of the preview mesh. Grid Glow Float Defines the glow intensity of the grid. Area Glow Float Defines the glow intensity of the area surrounding the tile. Selection Glow Float Defines the glow intensity of the selected tile. Preview Mesh Glow Float Defines the glow intensity of the preview mesh. Preview Mesh Transparency Float Defines the transparency of the preview mesh. Custom Grid Material Material Replaces the material used by the plugin for the grid. Custom Area Material Material Replaces the material used by the plugin for the area surrounding the tile. Custom Selection Material Material Replaces the material used by the plugin for the selected tile."},{"location":"snap-central/the-grid/#audio","title":"Audio","text":"Property Type Description Enable Boolean If set to true, audio feedback for selected tiles is enabled. The playing of audio is dependent on the settings configured in the Get Snap Parameter function. Volume Multiplier Float Volume multiplier for the audio feedback (Range 0-1). Custom Cue Sound Cue Replaces the audio cue used by the plugin."},{"location":"snap-central/the-grid/#advanced","title":"Advanced","text":"Property Type Description Object Trace Distance Float Defines the Target Object trace distance. This value will be overwritten if Lock Z-Axis is set to true on the GetSnapParameter function. Line Trace Extent Float Alters the start and end location for the line traces to calculate the z-coordinate to snap to. Tile Corner Line Trace Padding Float Specifies the padding of the corner line traces. It is crucial to note that the value should only be intentionally set to zero or lower, as traces will hit the neighboring tile and potentially cause undesired side effects. The minimum value, which corresponds to the center location of the tile, is equivalent to half the tile size. Drag Height Multiplier Float Multiplies the drag height, allowing you to drag higher but will also make scrolling more rapid. Ignore Actors For Decals Array&lt;Actor&gt; Actors added to the array will not be affected by the grid visuals. This includes the grid, area and selected tile decals. Ignore Actors For Line Traces Array&lt;Actor&gt; Actors added to the array will not be affected by any line traces issued by this plugin."},{"location":"snap-central/the-grid/#debug","title":"Debug","text":"Property Type Description Enable Boolean Enables debug settings. Show Vertical Indicator Boolean If set to true, a vertical indicator will appear to assist with debugging vertical dragging. Show Line Traces Boolean If set to true, all line traces used by the plugin for calculations will be visible. Show Hit Location Line Boolean If set to true, the original hit location will be indicated by a vertical line. Show Hit Location Sphere Boolean If set to true, the original hit location will be indicated by a sphere. Show Debug Panel Boolean If set to true, a debug panel containing the most important information will be displayed in the top-left corner. Line Trace Color Color Defines the color of the line traces. Hit Location Indicator Color Color Defines the color of the original hit location indicator."},{"location":"snap-central/usage/","title":"Usage","text":"<p>There are two ways to use the Get Snap Parameter function. Both options basically do the same with one exception.</p>"},{"location":"snap-central/usage/#with-object","title":"With Object","text":"<p>When passing an actor or camera component to the Target Object the plugin will streamline the snapping process by automating tracing and calculations, and enables vertical drag for added flexibility.</p> <p></p> <p></p>"},{"location":"snap-central/usage/#with-vector","title":"With Vector","text":"<p>When passing a vector to the Target Location the plugin will streamline the snapping process by automating tracing and calculations. However, vertical drag is disabled due to the missing pitch value which is required to calculate the drag offset on the Z-axis.</p> <p>This feature may be required for certain edge cases that involve complex character movements or actions, such as jumping off cliffs while snap-dragging along floating planes, where more dynamic positioning may be required. In these cases, it may be advisable to use only the plugin's snap logic and your own custom logic for handling the Z-axis drag.</p> <p></p>"},{"location":"snap-central/use-cases/","title":"Possible Use Cases","text":"<ul> <li>Implementing a system for building or placing objects in a 3D space with precise positioning and snapping to a grid or other points of reference.</li> <li>Creating a puzzle game or level editor that requires precise tile placement or snap-to-grid functionality.</li> <li>Enabling players to create custom maps or levels for a game, with the ability to snap objects or tiles to specific locations.</li> <li>Supporting a crafting or construction system that requires precise placement of components or parts.</li> <li>Creating a game that involves navigation or movement in a 3D space, such as a platformer or a first-person game, with snap-to-grid functionality for character movement.</li> <li>Implementing a system for placing or arranging objects in a 3D space that requires consistency or symmetry, such as in a building game or a city simulator.</li> <li>Enabling players to create custom camera positions or movements that snap to specific locations or angles, such as in a game with multiple viewing modes or perspectives.</li> </ul> <p>Youtube Demo</p>"},{"location":"trail-blazer/","title":"Introduction","text":"<p>TrailBlazer is a specialized grid-based pathfinding plugin tailored for Unreal Engine projects requiring precise and customizable navigation solutions. Ideal for puzzle games, mazes, and small to medium-sized game environments, this plugin provides an alternative to Unreal Engine's built-in pathfinding, focusing on specific scenarios where grid-based navigation is preferred. While it offers capabilities for larger landscapes, its optimal performance is seen in more contained environments. The plugin includes various adjustable settings like grid size, cell dimensions, and heuristic methods, giving developers the flexibility to fine-tune navigation to suit their game's unique requirements.</p> <p>Info</p> <p>This plugin is not intended to replace Unreal Engine's built-in pathfinding tools. It is tailored for developers who require complete control over all path locations and intricate navigation scenarios.</p>"},{"location":"trail-blazer/epilogue/","title":"Epilogue","text":"<p>The Trail Blazer pathfinding plugin is a versatile and powerful tool, thoughtfully crafted to provide developers with a customizable and alternative pathfinding solution, especially in scenarios requiring grid-based navigation. While it's not designed to replace Unreal Engine's native pathfinding solutions, it excels in particular use cases such as puzzles, mazes, and situations where fine-grained control over the pathfinding process and environment is essential.</p> <p>TrailBlazer's flexibility extends to adapting it for larger landscapes, although it's important to keep performance and scalability considerations in mind when doing so.</p> <p>Thank you for showing interest in Trail Blazer. I hope it proves to be a valuable tool for you.</p>"},{"location":"trail-blazer/faq/","title":"Epilogue","text":"<p>How does the performance of TrailBlazer compare to Unreal Engine's native pathfinding?</p> <ul> <li>TrailBlazer is optimized for grid-based pathfinding with a focus on customization. It performs exceptionally well in smaller to medium-sized environments. For very large landscapes, performance may vary, and it's recommended to adjust parameters like grid size and cell size for optimal performance.</li> </ul> <p>Can TrailBlazer be used for large open-world games?</p> <ul> <li>While possible, TrailBlazer is ideally suited for smaller, more controlled environments. For large open-world games, careful consideration of grid size and cell count is necessary to balance performance.</li> </ul> <p>How are round objects handled in the pathfinding process?</p> <ul> <li>The plugin incorporates a specific flag named Use Max Precision to enhance the handling of circular objects during pathfinding calculations. When this flag is enabled, the plugin takes into consideration the spherical attributes of objects.</li> <li>It's essential to point out that, for this flag to operate effectively, circular objects in your game world should be equipped with a sphere collision component. This component is utilized to accurately define the object's boundaries and facilitate path adjustments as needed.</li> </ul> <p>Why do I sometimes not receive path locations on certain maps and configurations?</p> <p>Note</p> <p>There can be several reasons for this issue. It's important to note that the availability of a path can be influenced by various settings. To address this, consider the following steps.</p> <ul> <li> <p>Adjust Cell Size: In tight or constrained spaces, the default cell size might not be suitable for generating paths. Try changing the cell size to better fit the specific environment.</p> </li> <li> <p>Heuristic Calculation: Experiment with different heuristic calculation methods. The choice of heuristic can impact the pathfinding results significantly, so finding the right one for your scenario is important.</p> </li> <li> <p>Explore Plugin Options: Explore additional options exposed by the plugin that can affect pathfinding behavior. These options might include settings related to path smoothing, collision handling, or other parameters that can impact the generation of paths.</p> </li> </ul> <p>Is TrailBlazer suitable for dynamic environments?</p> <ul> <li>TrailBlazer is capable of adapting to dynamic environmental changes. However, it's important to note that the grid is initially calculated on game start, and using it during gameplay could lead to blocking unless combined with a loading screen. Frequent recalculations in highly dynamic environments may also impact performance. Therefore, it's advisable to employ TrailBlazer in scenarios where environmental changes are less frequent or can be predictably managed.</li> </ul> <p>How does the plugin handle different terrain elevations or 3D environments?</p> <ul> <li>TrailBlazer can adjust path heights to match terrain elevations if the Adjust Path to Landscape Height option is enabled. However, its primary strength is in 2D grid-based pathfinding.</li> </ul> <p>Can I customize the pathfinding algorithm?</p> <ul> <li>Yes, TrailBlazer offers various customization options, including different heuristic calculations and the ability to include or exclude diagonal movements, among others.</li> </ul> <p>Is there support for path smoothing or avoiding sharp turns?</p> <ul> <li>Yes, the plugin includes options for path smoothing and setting thresholds for turn angles, which can create more natural and visually appealing movement patterns.</li> </ul> <p>How does TrailBlazer handle obstacles?</p> <ul> <li>At the beginning of the game, the plugin automatically detects obstacles within the grid. You can specify obstacle types and individual actors to be excluded from path calculations.</li> </ul> <p>Are there any limitations I should be aware of?</p> <ul> <li>TrailBlazer is primarily designed for 2D grid-based pathfinding. While it offers functionality to adjust to 3D terrain, its application in complex 3D environments or highly vertical spaces might be limited. Additionally, very large grids can impact performance, so careful planning and testing are advised.</li> </ul>"},{"location":"trail-blazer/the-actor/","title":"Actor","text":"<p>This section provides an overview of the TrailBlazer actor's properties that affect the pathfinding logic and debugging.</p>"},{"location":"trail-blazer/the-actor/#grid","title":"Grid","text":"Property Type Description Cell Size Float Defines the dimensions of each individual cell within the grid used for pathfinding. Num Columns Integer Specifies the number of columns in the grid. Increasing this value expands the grid horizontally. Num Rows Integer Determines the number of rows in the grid. Increasing this value expands the grid vertically. Heuristic Type Enumeration Selects the type of heuristic algorithm used for calculating the pathfinding cost. Different heuristics can affect the efficiency and path quality. Euclidean Weight Float Applies a weight to the Euclidean distance in the pathfinding calculation, influencing how straight or direct paths are. Include Diagonals Boolean Allows the pathfinding algorithm to consider diagonal movements, potentially creating more direct paths. Use Max Precision Boolean Enables the pathfinding algorithm to take into account the presence of spheres in the environment, resulting in the generation of more realistic paths. In certain scenarios, this functionality may be essential for optimal pathfinding. Add Cell Buffer Boolean Enables a buffer zone around each cell, marking nearby cells as unwalkable to create a safer path. Buffer Distance Integer Sets the size of the buffer zone around obstacles, defined as the number of cells. Larger values increase the clearance around obstacles. Smooth Turns Boolean Activates path smoothing to reduce sharp turns, making movement along the path more natural. Smoothing Interpolation Points Integer Determines the number of points used to smooth out turns along the path. Higher values result in smoother paths but may affect performance. Smoothing Angle Threshold Float Sets the angle threshold for smoothing. Turns sharper than this angle will be smoothed out."},{"location":"trail-blazer/the-actor/#heuristic-types","title":"Heuristic Types","text":"Type Description Euclidean Measures the straight-line distance between two points in the grid. This is the most direct and shortest path but may not always be the most efficient in terms of path cost or real-world navigation. Weighted Euclidean Similar to Euclidean, but with a weight multiplier applied. This emphasizes straight-line paths, making them more favorable in the pathfinding calculation, often leading to more direct routes. Manhattan Calculates the sum of the absolute differences of the Cartesian coordinates. Ideal for grid-based maps where movement is typically restricted to horizontal and vertical directions (like city blocks). Chebyshev Considers the maximum of the absolute differences of the Cartesian coordinates. It's effective for grids allowing diagonal movement, as it treats horizontal, vertical, and diagonal moves as having equal cost. Manhattan Euclidean A hybrid approach that averages Manhattan and Euclidean distances. This can provide a balance between direct paths and path costs, especially in less restricted grid environments. Tie-Breaking Euclidean Adds a small cost to the standard Euclidean heuristic to help break ties between paths of equal length. This can be useful in reducing the number of nodes explored and ensuring more deterministic pathfinding."},{"location":"trail-blazer/the-actor/#obstacles","title":"Obstacles","text":"Property Type Description Ignore All Obstacles Boolean If enabled, the pathfinding algorithm will ignore all obstacles, allowing free movement across the grid. Enable Vertical Obstacle Detection Float Toggles the vertical obstacle detection. If disabled, obstacles are detected regardless of their position on the z-axis. Vertical Obstacle Offset Boolean Defines the Z-axis offset, either above or below the Trail Blazer actors location, for detecting obstacles. Obstacle Types To Exclude Array of TSubclassOf Defines a list of actor types that should be ignored as obstacles, allowing paths to pass through them. Obstacles To Exclude Array of AActor* Specifies individual actors to be excluded from being considered as obstacles in path calculations."},{"location":"trail-blazer/the-actor/#tracing","title":"Tracing","text":"Property Type Description Adjust Path To Landscape Height Boolean When enabled, adjusts the path's height to match the landscape's contour, useful for uneven terrain. Trace Extent Z Float Determines the vertical range for landscape height adjustments during path calculations. Increase for more accurate results on varied terrain. Actors To Exclude Array of AActor* Additional actors to exclude from height tracing."},{"location":"trail-blazer/the-actor/#debug","title":"Debug","text":"Property Type Description Start Actor AActor* Reference actor to mark the start of the path for debugging. End Actor AActor* Reference actor to mark the end of the path for debugging. Debug Start Location FVector Start location for pathfinding used in debugging. Debug End Location FVector End location for pathfinding used in debugging. Show Grid Boolean Display the grid in the game world for debugging purposes. Grid Extent Float Size of the visual representation of the grid for debugging. Show Path Locations Boolean Display calculated path locations in the game world for debugging. Show Path Life Time Float Lifetime of the visual representation of the path. Increase for longer-lasting paths. Path Particles Scale Float Scale of the particles used to visualize the path. Show Path Movement Boolean Visualize the movement along the path for debugging. Find Path On Begin Play Boolean Automatically find a path when the game begins. Useful for initial testing."},{"location":"trail-blazer/usage/","title":"Usage","text":""},{"location":"trail-blazer/usage/#setup","title":"Setup","text":"<p>To get started, open the actor you wish to have control over the pathfinding feature. Obtain a reference to the TrailBlazerGrid_BP previously placed in the world. Drag out from the output pin and bind the On Path Calculated event. Afterward, drag out again and search for the Find Path Async function. Specify the start and end locations. Please note that the locations must be within the grid.  Connect the nodes as illustrated below.</p> <p></p>"},{"location":"trail-blazer/usage/#recommended","title":"Recommended","text":"<p>Warning</p> <p>Cameras and pawns hovering within the obstacle detection range on game start will also be detected as obstacles, potentially preventing a path from being found. In such cases, they should be explicitly excluded in the obstacles section to avoid this issue.</p> <ul> <li>Fine-tune the grid size and cell size based on your environment\u2019s scale and complexity.</li> <li>Use appropriate heuristic calculations based on your game\u2019s requirements.</li> <li>Regularly profile and monitor performance, especially in larger or more complex environments.</li> </ul>"},{"location":"trail-blazer/usage/#showcase","title":"Showcase","text":"<p>Maze</p> <p>Showcases pathfinding through a rather complicated maze.</p> Property Value Cell Size 20 Num Columns 300 Num Rows 300 Include Diagonals True Add Cell Buffer True Buffer Distance 2 <p></p>"},{"location":"trail-blazer/use-cases/","title":"Use cases","text":"<ul> <li>Puzzle games or mazes where navigating through intricate paths is a key gameplay element.</li> <li>Turn-based or real-time strategy games where precise movement and positioning on a grid are crucial.</li> <li>Character or unit movements on grid-based maps, providing clear and optimized pathfinding solutions.</li> <li>Useful for creating paths for placement of visual effects.</li> <li>Useful in simulation games that involve navigating through complex grid-based environments.</li> </ul>"}]}